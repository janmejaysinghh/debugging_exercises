/**
 * Debugging Exercise 1: Array Manipulation
 * 
 * Description:
 * This program is a debugging exercise aimed at identifying and fixing errors
 * in a Java program that manipulates arrays.
 * 
 * Objective:
 * The original code contains a loop condition error (i <= numbers.length) that causes
 * an ArrayIndexOutOfBoundsException. The goal is to correct this error.
 * 
 * Instructions:
 * 1. Review the code carefully to understand the issue.
 * 2. Debug the code to ensure it correctly iterates through the array without errors.
 * 
 * Note:
 * The original code includes the incorrect loop condition (i <= numbers.length), which
 * results in an ArrayIndexOutOfBoundsException. The corrected condition is (i <= numbers.length - 1).
 * 
 * @author [janmejay kumar singh]
 * @version 1.0
 * @linkedin [janmejay kumar singh | LinkedIn]
 */

public class ArrayManipulation {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        
        // Original code with an error:
        // for (int i = 0; i <= numbers.length; i++) {
       // System.out.println(numbers[i]);
       //}

        
        // Corrected the loop condition to iterate within the valid array indices.
        // The original condition (i <= numbers.length) would cause an
        // Exception in thread "main" - java.lang.ArrayIndexOutOfBoundsException.
        for (int i = 0; i <= numbers.length - 1; i++) {
            System.out.println(numbers[i]);
        }
    }
}





/**
 * Debugging Exercise 2: Object-Oriented Programming
 * 
 * Objective:
 * The goal of this exercise is to identify and fix errors in a Java program
 * that demonstrates basic object-oriented programming principles.
 *
 * Description:
 * This program defines a `Car` class to represent cars and demonstrates creating
 * car objects and calling their methods. However, it contains a critical error
 * when trying to call the non-existent `stop()` method on a `Car` object.
 * Your task is to debug the code and make it work as intended.
 * 
 * Instructions:
 * 1. Examine the code carefully to understand the issue.
 * 2. Debug the code to ensure it correctly demonstrates object-oriented principles
 *    without errors.
 *
 * Note:
 * The original code attempts to call a non-existent `stop()` method on a `Car`
 * object, which is the source of the error.
 * 
 * @author [janmejay kumar singh]
 * @version 1.0
 * @linkedin [janmejay kumar singh | LinkedIn]
 */

class Car {
    private String make;
    private String model;

    // Constructor to initialize make and model
    public Car(String make, String model) {
        this.make = make;
        this.model = model;
    }

    // Method to start the car
    public void start() {
        System.out.println("Starting the car.");
    }

    // Method to stop the car
    public void stop() {
        System.out.println("Stopping the car.");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create a Car object
        Car car = new Car("Toyota", "Camry");

        // Start the car
        car.start();

        // Stop the car
        car.stop();
    }
}






/** * Debugging Exercise 3: Exception Handling 
*
* Objective: 
* The goal of this exercise is to identify and fix errors in a Java program * that demonstrates exception handling. 
* 
* Description: 
* This program demonstrates how to handle exceptions in Java using try-catch blocks. 
* It includes examples of catching ArrayIndexOutOfBoundsException and handling * ArithmeticException. 
* 
* Instructions: 
* 1. Review the code carefully to understand how exception handling works. 
* 2. Debug the code to ensure it correctly handles exceptions without errors. 
* 
 * @author [janmejay kumar singh]
 * @version 1.0
 * @linkedin [janmejay kumar singh | LinkedIn]
 */


public class ExceptionHandling {
public static void main(String[] args) {
int[] numbers = {1, 2, 3, 4, 5};

try {
// Attempt to access an element outside the array bounds
System.out.println(numbers[10]);
       } catch (ArrayIndexOutOfBoundsException e) {

// Handle the ArrayIndexOutOfBoundsException
System.out.println("Array index out of bounds.");
    }

try {
// Attempt to divide by zero
int result = divide(10, 0);
System.out.println("Result: " + result);
} catch (ArithmeticException e) {
// Handle the ArithmeticException
System.out.println("Cannot divide by zero.");
   }
}

/**
* A method that performs division.
* @param a The numerator.
* @param b The denominator.
* @return The result of the division.
* @throws ArithmeticException if the denominator is zero.
*/

public static int divide(int a, int b) {
if (b == 0) {
    throw new ArithmeticException("Division by zero is not allowed.");
  }
return a / b;
    }
}

